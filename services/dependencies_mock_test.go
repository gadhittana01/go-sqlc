// Code generated by MockGen. DO NOT EDIT.
// Source: ./services/dependencies.go

// Package mock_services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	author "github.com/gadhittana01/go-sqlc/pkg/author"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthorResource is a mock of AuthorResource interface.
type MockAuthorResource struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorResourceMockRecorder
}

// MockAuthorResourceMockRecorder is the mock recorder for MockAuthorResource.
type MockAuthorResourceMockRecorder struct {
	mock *MockAuthorResource
}

// NewMockAuthorResource creates a new mock instance.
func NewMockAuthorResource(ctrl *gomock.Controller) *MockAuthorResource {
	mock := &MockAuthorResource{ctrl: ctrl}
	mock.recorder = &MockAuthorResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorResource) EXPECT() *MockAuthorResourceMockRecorder {
	return m.recorder
}

// CreateAuthor mocks base method.
func (m *MockAuthorResource) CreateAuthor(ctx context.Context, arg author.CreateAuthorParams) (author.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthor", ctx, arg)
	ret0, _ := ret[0].(author.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuthor indicates an expected call of CreateAuthor.
func (mr *MockAuthorResourceMockRecorder) CreateAuthor(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthor", reflect.TypeOf((*MockAuthorResource)(nil).CreateAuthor), ctx, arg)
}

// DeleteAuthor mocks base method.
func (m *MockAuthorResource) DeleteAuthor(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthor", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuthor indicates an expected call of DeleteAuthor.
func (mr *MockAuthorResourceMockRecorder) DeleteAuthor(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthor", reflect.TypeOf((*MockAuthorResource)(nil).DeleteAuthor), ctx, id)
}

// GetAuthor mocks base method.
func (m *MockAuthorResource) GetAuthor(ctx context.Context, id int64) (author.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthor", ctx, id)
	ret0, _ := ret[0].(author.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthor indicates an expected call of GetAuthor.
func (mr *MockAuthorResourceMockRecorder) GetAuthor(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthor", reflect.TypeOf((*MockAuthorResource)(nil).GetAuthor), ctx, id)
}

// ListAuthors mocks base method.
func (m *MockAuthorResource) ListAuthors(ctx context.Context) ([]author.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAuthors", ctx)
	ret0, _ := ret[0].([]author.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAuthors indicates an expected call of ListAuthors.
func (mr *MockAuthorResourceMockRecorder) ListAuthors(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuthors", reflect.TypeOf((*MockAuthorResource)(nil).ListAuthors), ctx)
}

// UpdateAuthor mocks base method.
func (m *MockAuthorResource) UpdateAuthor(ctx context.Context, arg author.UpdateAuthorParams) (author.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthor", ctx, arg)
	ret0, _ := ret[0].(author.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAuthor indicates an expected call of UpdateAuthor.
func (mr *MockAuthorResourceMockRecorder) UpdateAuthor(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthor", reflect.TypeOf((*MockAuthorResource)(nil).UpdateAuthor), ctx, arg)
}
