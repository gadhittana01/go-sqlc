// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package resthttp

import (
	"database/sql"
	"github.com/gadhittana01/go-sqlc/db"
	"github.com/gadhittana01/go-sqlc/pkg/author"
	"github.com/gadhittana01/go-sqlc/services"
	"github.com/google/wire"
)

// Injectors from author_injector.go:

func InitializedAuthorHandler() (*AuthorHandler, error) {
	sqlDB := db.InitDB()
	queries := author.New(sqlDB)
	servicesAuthorService, err := services.NewAuthorService(queries)
	if err != nil {
		return nil, err
	}
	authorHandler := NewAuthorHandler(servicesAuthorService)
	return authorHandler, nil
}

// Injectors from dummy_injector.go:

func InitializedDummyHandler(name string, name2 services.DummyDependencies, isError bool, dep DummyDependencies) (*DummyHandler, error) {
	servicesDummyService, err := services.NewDummyService(name, name2, isError)
	if err != nil {
		return nil, err
	}
	dummyHandler := NewDummyHandler(dep, servicesDummyService)
	return dummyHandler, nil
}

// author_injector.go:

var dbSet = wire.NewSet(db.InitDB, wire.Bind(new(author.DBTX), new(*sql.DB)))

var authorPkgSet = wire.NewSet(author.New, wire.Bind(new(services.AuthorResource), new(*author.Queries)))

var authorService = wire.NewSet(services.NewAuthorService, wire.Bind(new(AuthorService), new(services.AuthorService)))

// dummy_injector.go:

var dummyService = wire.NewSet(services.NewDummyService, wire.Bind(new(DummyService), new(services.DummyService)))
